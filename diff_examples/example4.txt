diff --git a/src/commit/commit.go b/src/commit/commit.go
deleted file mode 100644
index 07daa3f..0000000
--- a/src/commit/commit.go
+++ /dev/null
@@ -1,196 +0,0 @@
-package main
-
-import (
-	"diffparse"
-	"encoding/json"
-	"flag"
-	"fmt"
-	log "github.com/sirupsen/logrus"
-	"io/ioutil"
-	"os"
-	"os/exec"
-	"regexp"
-	"time"
-)
-
-var (
-	TODOReg        *regexp.Regexp
-	config         Config
-	cachedFlag     *bool
-	verboseLogFlag *bool
-)
-
-// GetDiffFromCmd runs the git diff command on the OS and returns a string of the result or the error that the cmd produced.
-func GetDiffFromCmd() (string, error) {
-	log.WithFields(log.Fields{
-		"cached": *cachedFlag,
-	}).Debug("Running Git diff")
-
-	// Run a git diff to look for changes --cached to be added for precommit hook
-	var cmd *exec.Cmd
-	if *cachedFlag {
-		cmd = exec.Command("git", "diff", "--cached")
-	} else {
-		cmd = exec.Command("git", "diff")
-	}
-	resp, err := cmd.CombinedOutput()
-
-	// If error running git diff abort all
-	if err != nil {
-		if err, ok := err.(*exec.ExitError); ok {
-			log.WithFields(log.Fields{
-				"exit code": err,
-				"stderr":    fmt.Sprintf("%s", resp),
-			}).Fatal("Git diff failed to exit")
-			return "", err
-		} else {
-			log.WithError(err).Fatal("Git diff couldn't be ran")
-			return "", err
-		}
-	}
-
-	// TODO: Is printing the diff or length helpful?
-	diff := fmt.Sprintf("%s", resp)
-	log.WithFields(log.Fields{
-		"length": len(diff),
-	}).Debug("Returned diff")
-
-	return diff, nil
-}
-
-// GetDiffFromFile reads in the filepath specified in the config and returns a string of the contents and any read errors
-func GetDiffFromFile() (string, error) {
-	bDiff, err := ioutil.ReadFile(config.DiffFrom)
-	if err != nil {
-		return "", err
-	}
-	return fmt.Sprintf("%s", bDiff), nil
-}
-
-func HandleLog() {
-	log.SetLevel(log.InfoLevel)
-	if *verboseLogFlag {
-		log.SetLevel(log.DebugLevel)
-	}
-}
-
-func HandleFlags() {
-	verboseLogFlag = flag.Bool("v", false, "verbose output")
-	cachedFlag = flag.Bool("c", false, "a flag that adds --cached to the git diff command")
-	flag.Parse()
-}
-
-func HandleDiffSource() string {
-	GetDiff := GetDiffFromFile
-	if config.DiffFrom == "cmd" {
-		GetDiff = GetDiffFromCmd
-	}
-	rawDiff, err := GetDiff()
-	if err != nil {
-		log.Fatal("error getting diff: ", err.Error())
-		os.Exit(1)
-	} else if rawDiff == "" {
-		log.Fatal("No git diff output - exiting")
-		os.Exit(1)
-	}
-	return rawDiff
-}
-
-func WriteStagedTasks(tasks []Task) {
-	file, err := os.OpenFile("staged_tasks.json", os.O_RDWR|os.O_CREATE, 0644)
-	if err != nil {
-		log.Fatal(err.Error())
-		os.Exit(1)
-	}
-	defer file.Close()
-
-	btask, err := json.Marshal(tasks)
-	if err != nil {
-		log.Fatal(err.Error())
-		os.Exit(1)
-	}
-	_, err = file.Write(btask)
-	if err != nil {
-		log.Fatal(err.Error())
-		os.Exit(1)
-	}
-}
-
-// TODO: Refactor main in to smaller functions
-func main() {
-	startTime := time.Now() // To Benchmark
-
-	HandleFlags()
-	HandleLog()
-
-	log.Info("Gitdo started")
-
-	err := LoadConfig()
-	if err != nil {
-		log.WithError(err).Fatal("couldn't load config")
-		os.Exit(1)
-	}
-
-	rawDiff := HandleDiffSource()
-
-	// TODO: Load from config for XXX HACK FIXME and Custom annotation
-	TODOReg = regexp.MustCompile(`(?:[[:space:]]|)//(?:[[:space:]]|)TODO(?:.*):[[:space:]](.*)`)
-
-	// Parse diff output
-	lines, err := diffparse.ParseGitDiff(rawDiff)
-	if err != nil {
-		log.Fatalf("Error processing diff: %v", err)
-		os.Exit(1)
-	}
-
-	// Loop over files and run go routines for each file changed
-	tasks := ProcessDiff(lines)
-	for _, task := range tasks {
-		log.WithField("task", task.toString()).Debug("New task")
-	}
-
-	WriteStagedTasks(tasks)
-
-	log.WithField("time", time.Now().Sub(startTime)).Info("Gitdo finished")
-}
-
-// ProcessFileDiff Takes a diff section for a file and extracts TODO comments
-func ProcessDiff(lines []diffparse.SourceLine) []Task {
-	var stagedTasks []Task
-	for _, line := range lines {
-		if line.Mode == diffparse.REMOVED {
-			continue
-		}
-		task, found := CheckTask(line)
-		if found {
-			stagedTasks = append(stagedTasks, task)
-		}
-	}
-	return stagedTasks
-}
-
-func CheckTask(line diffparse.SourceLine) (Task, bool) {
-	match := TODOReg.FindStringSubmatch(line.Content)
-	if len(match) > 0 { // if match was found
-		t := Task{
-			line.FileTo,
-			match[1],
-			line.Position,
-			config.Author,
-		}
-		return t, true
-	}
-	return Task{}, false
-}
-
-type Task struct {
-	FileName string `json:"file_name"`
-	TaskName string `json:"task_name"`
-	FileLine int    `json:"file_line"`
-	Author   string `json:"author"`
-}
-
-func (t *Task) toString() string {
-	return fmt.Sprintf("Author: %s, Task: %s, File: %s, Position: %d",
-		t.Author, t.TaskName, t.FileName, t.FileLine)
-}
diff --git a/src/commit/commit_test.go b/src/commit/commit_test.go
deleted file mode 100644
index eb92b07..0000000
--- a/src/commit/commit_test.go
+++ /dev/null
@@ -1,23 +0,0 @@
-package main
-
-import "encoding/json"
-import "fmt"
-import "testing"
-
-func TestGetDiff(t *testing.T) {
-	fmt.Println("Running Test")
-	_, err := GetDiffFromCmd()
-	if err != nil {
-		t.Fail()
-	}
-}
-
-func TestVet(t *testing.T) {
-	example := []byte(`{"file_name": "cli.go", "task_name":"task todo", "file_line":2}`)
-	var task Task
-	err := json.Unmarshal(example, &task)
-	if err != nil {
-		t.Error(err)
-	}
-	fmt.Println(task)
-}
diff --git a/src/commit/config.go b/src/commit/config.go
deleted file mode 100644
index 85dba01..0000000
--- a/src/commit/config.go
+++ /dev/null
@@ -1,33 +0,0 @@
-package main
-
-import (
-	"encoding/json"
-	log "github.com/sirupsen/logrus"
-	"io/ioutil"
-)
-
-type Config struct {
-	Author     string `json:"author"`
-	PluginName string `json:"plugin_name"`
-	PluginCmd  string `json:"plugin_cmd"`
-	DiffFrom   string `json:"diff_from"`
-}
-
-//TODO: load config from file test
-func LoadConfig() error {
-	bConfig, err := ioutil.ReadFile("./config.json")
-	if err != nil {
-		return err
-	}
-	err = json.Unmarshal(bConfig, &config)
-	if err != nil {
-		return err
-	}
-	log.WithFields(log.Fields{
-		"author":             config.Author,
-		"plugin_name":        config.PluginName,
-		"plugin_interpreter": config.PluginCmd,
-		"diff_source":        config.DiffFrom,
-	}).Debug("Config")
-	return nil
-}
diff --git a/src/commit/config.json b/src/commit/config.json
deleted file mode 100644
index 207d68e..0000000
--- a/src/commit/config.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-	"author":"benjamin.coleman@me.com",
-	"plugin_cmd":"node",
-	"plugin_name":"./trello_js/trello.js",
-	"diff_from":"cmd"
-}
diff --git a/src/commit/staged_tasks.json b/src/commit/staged_tasks.json
deleted file mode 100644
index 9b8b57b..0000000
--- a/src/commit/staged_tasks.json
+++ /dev/null
@@ -1 +0,0 @@
-[{"file_name":"src/commit/commit.go","task_name":"Refactor main in to smaller functions","file_line":0,"author":"benjamin.coleman@me.com"}]","task_name":"Create test suite","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"config.go","task_name":"Cleanup","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"diffparser/diffparser_test.go","task_name":"Fix init handler","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"diffparser/diffparser_test.go","task_name":"Testing","file_line":0,"author":"benjamin.coleman@me.com"}]
\ No newline at end of file
diff --git a/src/diff_examples/example.txt b/src/diff_examples/example.txt
deleted file mode 100644
index 42fc427..0000000
--- a/src/diff_examples/example.txt
+++ /dev/null
@@ -1,210 +0,0 @@
-diff --git a/cli.go b/cli.go
-index 30d4ebc..ca12716 100644
---- a/cli.go
-+++ b/cli.go
-@@ -1,8 +1,9 @@
- package main
- 
- import (
-+	"encoding/json"
- 	"fmt"
--	"github.com/waigani/diffparser"
-+	"github.com/appscode/diffparser"
- 	"log"
- 	"os"
- 	"os/exec"
-@@ -24,12 +25,15 @@ func main() {
- 	}
- 
- 	// Save output as string
--	cmdOutput := fmt.Sprintf("\n%s", resp)
-+	cmdOutput := fmt.Sprintf("%s", resp)
-+
-+	fmt.Println(cmdOutput + "\n\n\n\n")
- 
- 	// Parse diff output
- 	diff, err := diffparser.Parse(cmdOutput)
- 	if err != nil {
- 		log.Fatalf("Error processing diff: %v", err)
-+		os.Exit(1)
- 	}
- 
- 	// Create waitgroup to sync handling of all files
-@@ -50,31 +54,29 @@ func ProcessFileDiff(file *diffparser.DiffFile, wg *sync.WaitGroup) {
- 
- 	re := regexp.MustCompile(`(?:[[:space:]]|)//(?:[[:space:]]|)TODO:[[:space:]](.*)`)
- 
--	output := fmt.Sprintf("%s\n", file.NewName)
-+	stagedTasks := make([]Task, 0)
-+
-+	// TODO(benjamin.coleman@me.com): Clean up this spaghetti code
- 	for _, hunk := range file.Hunks {
- 		for _, line := range hunk.NewRange.Lines {
--			if line.Mode == 0 {
-+			if line.Mode == 0 { // if line was added
- 				match := re.FindStringSubmatch(line.Content)
--				if len(match) > 0 {
-+				if len(match) > 0 { // if match was found
- 					t := Task{
- 						file.NewName,
- 						match[1],
--						line.Position,
-+						line.Number,
- 					}
--					output += t.ToString() + "\n"
-+					stagedTasks = append(stagedTasks, t)
- 				}
- 			}
- 		}
- 	}
--	fmt.Println(output)
--}
- 
--type Task struct {
--	FileName string
--	TaskName string
--	Position int
--}
-+	b, err := json.Marshal(stagedTasks)
-+	if err != nil {
-+		log.Fatal(err)
-+	}
- 
--func (t *Task) ToString() string {
--	return fmt.Sprintf("File: %s, Task: %s, Pos: %d", t.FileName, t.TaskName, t.Position)
-+	fmt.Printf("%s\n", b)
- }
-diff --git a/config.go b/config.go
-index ea10e7d..eda3313 100644
---- a/config.go
-+++ b/config.go
-@@ -5,5 +5,8 @@ package main
- // TODO: with tab then space
- 
- func test() {
--	// TODO: Create test suite
-+}
-+
-+func hello() {
-+	// TODO: Cleanup
- }
-diff --git a/diffparser/diffparser.go b/diffparser/diffparser.go
-new file mode 100644
-index 0000000..afed857
---- /dev/null
-+++ b/diffparser/diffparser.go
-@@ -0,0 +1,43 @@
-+package diffparser
-+
-+import (
-+	"strings"
-+)
-+
-+// SplitToFiles takes the given diff and splits it in to an array of strings, each a different file section of the diff
-+func SplitToFiles(diff string) []string {
-+	diffLines := strings.Split(diff, "\n")
-+	var files []string
-+
-+	currentFile := ""
-+	for _, line := range diffLines {
-+		if strings.HasPrefix(line, "diff") && currentFile != "" {
-+			files = append(files, currentFile)
-+			currentFile = ""
-+		}
-+		currentFile += line + "\n"
-+	}
-+	files = append(files, currentFile)
-+
-+	return files
-+}
-+
-+// ParseDiff takes a given string diff and converts it in to useable structs
-+func ParseDiff(diff string) {
-+
-+}
-+
-+type File struct {
-+	OrigFile string
-+	NewFile  string
-+	Hunks    []hunk
-+}
-+type hunk struct {
-+	origStartInd int
-+	origRange    int
-+	newStartInd  int
-+	newRange     int
-+	content      string
-+}
-+
-+func SplitToChunk(file string) {}
-diff --git a/diffparser/diffparser_test.go b/diffparser/diffparser_test.go
-new file mode 100644
-index 0000000..2fde0d4
---- /dev/null
-+++ b/diffparser/diffparser_test.go
-@@ -0,0 +1,52 @@
-+package diffparser
-+
-+import "testing"
-+
-+var exampleDiff = `diff --git a/Main.go b/Main.go
-+index 984e788..09fba66 100644
-+--- a/Main.go
-++++ b/Main.go
-+@@ -17,6 +17,7 @@ type PageInfo struct {
-+	 User *user.User
-+	 LoginOut string
-+ }
-+-//TODO: Fix init handler
-+ 
-+ func init() {
-+	 http.HandleFunc("/", HomeHandler)
-+@@ -43,6 +44,7 @@ func NewRequestHandler(w http.ResponseWriter, r *http.Request) {
-+	 }
-+ }
-+ 
-++//TODO: Talk to matt about handle here
-+ /**
-+ Handles the index page for header, footer and the likes
-+  */
-+diff --git a/Users.go b/Users.go
-+index 34e4c3b..7a81965 100644
-+--- a/Users.go
-++++ b/Users.go
-+@@ -4,7 +4,7 @@ import (
-+	 "golang.org/x/net/context"
-+	 "google.golang.org/appengine/user"
-+ )
-+-
-+-//TODO: Testing
-+ func userControl(ctx context.Context, currentPage string) (*user.User, string){
-+ 
-+	 user := user.Current(ctx)
-+@@ -33,6 +33,7 @@ func getLoginURL(ctx context.Context, currentPage string) (string, error) {
-+	 return loginURL, nil
-+ }
-+ 
-++   //TODO: Get out
-+ func getLogoutURL(ctx context.Context, currentPage string) (string, error) {
-+	 //LogoutURL
-+logoutURL, err := user.LogoutURL(ctx, currentPage)`
-+
-+func TestSplitToFiles(t *testing.T) {
-+	result := SplitToFiles(exampleDiff)
-+	if len(result) != 2 {
-+		t.Errorf("Expected 2 file sections, got %d", len(result))
-+	}
-+}
-diff --git a/structs.go b/structs.go
-new file mode 100644
-index 0000000..9c1ba55
---- /dev/null
-+++ b/structs.go
-@@ -0,0 +1,7 @@
-+package main
-+
-+type Task struct {
-+	FileName string `json: file_name`
-+	TaskName string `json: task_name`
-+	FileLine int    `json: FileLine`
-+}
diff --git a/src/diff_examples/example2.txt b/src/diff_examples/example2.txt
deleted file mode 100644
index b8d8b7d..0000000
--- a/src/diff_examples/example2.txt
+++ /dev/null
@@ -1,168 +0,0 @@
-diff --git a/Makefile b/Makefile
-index 0887afd..924e99d 100644
---- a/Makefile
-+++ b/Makefile
-@@ -1,6 +1,9 @@
--install: 
--	go build ./
--	mv Gitdo .git/gitdo/
-+install:
-+	rm -rf ./hooks/*
-+	go build -o Gitdo ./app
-+	mv Gitdo ./hooks
-+	cp pre-commit ./hooks
-+	cp ./plugins/gitdo_trello.py ./hooks
- 
- rm_commit:
- 	git reset --soft HEAD~
-diff --git a/cli.go b/cli.go
-deleted file mode 100644
-index ed8ae00..0000000
---- a/cli.go
-+++ /dev/null
-@@ -1,136 +0,0 @@
--package main
--
--import (
--	"encoding/json"
--	"fmt"
--	"github.com/waigani/diffparser"
--	"log"
--	"os"
--	"os/exec"
--	"regexp"
--	"time"
--)
--
--var TODOReg *regexp.Regexp
--var pluginfile string = "gitdo_trello.py"
--
--// GetDiff runs the git diff command on the OS and returns a string of the result or the error that the cmd produced.
--func GetDiff() (string, error) {
--	// Run a git diff to look for changes --cached to be added for precommit hook
--	// cmd := exec.Command("git", "diff", "--cached")
--	cmd := exec.Command("git", "diff")
--
--	resp, err := cmd.Output()
--
--	// If error running git diff abort all
--	if err != nil {
--		if err, ok := err.(*exec.ExitError); ok {
--			log.Print("git diff failed to exit: ", string(err.Stderr))
--			return "", err
--		} else {
--			log.Print("git diff couldn't be ran: ", err.Error())
--			return "", err
--		}
--	}
--
--	return fmt.Sprintf("%s", resp), nil
--}
--
--func main() {
--	startTime := time.Now() // To Benchmark
--	log.Print("Gitdo started")
--
--	rawDiff, err := GetDiff()
--	if err != nil {
--		os.Exit(1)
--	} else if rawDiff == "" {
--		log.Print("No git diff output - exiting")
--		os.Exit(1)
--	}
--
--	// TODO: Load from config for XXX HACK FIXME and Custom annotation
--	TODOReg = regexp.MustCompile(`(?:[[:space:]]|)//(?:[[:space:]]|)TODO:[[:space:]](.*)`)
--
--	// Parse diff output
--	diff, err := diffparser.Parse(rawDiff)
--	if err != nil {
--		log.Fatalf("Error processing diff: %v", err)
--		os.Exit(1)
--	}
--
--	// Create channel for task arrays to be returned from goroutines processing files
--	taskChan := make(chan []Task)
--	// Task array for all tasks to be added to
--	allTasks := make([]Task, 0)
--
--	// Loop over files and run go routines for each file changed
--	for _, file := range diff.Files {
--		go ProcessFileDiff(file, taskChan)
--	}
--
--	// Capture all tasks sent back and add them to the full list
--	for range diff.Files {
--		allTasks = append(allTasks, <-taskChan...)
--	}
--
--	RunPlugin(allTasks)
--
--	log.Print("Gitdo finished in ", time.Now().Sub(startTime))
--}
--
--func RunPlugin(allTasks []Task) {
--	// JSONify all tasks for plugins
--	b, err := json.Marshal(allTasks)
--	if err != nil {
--		log.Fatalf("Error marshalling task array to json: %v", err)
--		os.Exit(1)
--	}
--
--	// Run Plugin
--	plugin := exec.Command("python3", ".git/gitdo/"+pluginfile, fmt.Sprintf("%s", b))
--	resp, err := plugin.CombinedOutput()
--	log.Printf("Plugin output:\n%s", resp)
--	if err != nil {
--		log.Fatalf("Gitdo plugin failed: %v", err)
--		os.Exit(1)
--	}
--}
--
--// ProcessFileDiff Takes a diff section for a file and extracts TODO comments
--func ProcessFileDiff(file *diffparser.DiffFile, taskChan chan<- []Task) {
--	stagedTasks := make([]Task, 0)
--
--	// TODO: Clean up this spaghetti code
--	for _, hunk := range file.Hunks { // Loop through diff hunks
--		for _, line := range hunk.NewRange.Lines { // Loop over line changes
--			if line.Mode == 0 { // if line was added
--				task, found := CheckTask(line, file.NewName)
--				if found {
--					stagedTasks = append(stagedTasks, task)
--				}
--			}
--		}
--	}
--
--	taskChan <- stagedTasks
--}
--
--//TODO: Create test function for task reg
--func CheckTask(line *diffparser.DiffLine, fileName string) (Task, bool) {
--	match := TODOReg.FindStringSubmatch(line.Content)
--	if len(match) > 0 { // if match was found
--		t := Task{
--			fileName,
--			match[1],
--			line.Number,
--		}
--		return t, true
--	}
--	return Task{}, false
--}
--
--type Task struct {
--	FileName string `json:"file_name"`
--	TaskName string `json:"task_name"`
--	FileLine int    `json:"file_line"`
--}
-diff --git a/config.go b/config.go
-deleted file mode 100644
-index aa891e2..0000000
---- a/config.go
-+++ /dev/null
-@@ -1,3 +0,0 @@
--package main
--
--//TODO: load config from file test
diff --git a/src/diff_examples/example3.txt b/src/diff_examples/example3.txt
deleted file mode 100644
index 0ef27ab..0000000
--- a/src/diff_examples/example3.txt
+++ /dev/null
@@ -1,243 +0,0 @@
-diff --git a/app/cli.go b/app/cli.go
-deleted file mode 100644
-index b927391..0000000
---- a/app/cli.go
-+++ /dev/null
-@@ -1,141 +0,0 @@
--package main
--
--import (
--	"encoding/json"
--	"fmt"
--	"github.com/nebbers1111/diffparse"
--	"io/ioutil"
--	"log"
--	"os"
--	"os/exec"
--	"regexp"
--	"time"
--)
--
--var (
--	TODOReg *regexp.Regexp
--	config  Config
--)
--
--// GetDiffFromCmd runs the git diff command on the OS and returns a string of the result or the error that the cmd produced.
--func GetDiffFromCmd() (string, error) {
--	// Run a git diff to look for changes --cached to be added for precommit hook
--	// cmd := exec.Command("git", "diff", "--cached")
--	cmd := exec.Command("git", "diff")
--
--	resp, err := cmd.Output()
--
--	// If error running git diff abort all
--	if err != nil {
--		if err, ok := err.(*exec.ExitError); ok {
--			log.Print("git diff failed to exit: ", string(err.Stderr))
--			return "", err
--		} else {
--			log.Print("git diff couldn't be ran: ", err.Error())
--			return "", err
--		}
--	}
--
--	return fmt.Sprintf("%s", resp), nil
--}
--
--func GetDiffFromFile() (string, error) {
--	bDiff, err := ioutil.ReadFile(config.DiffFrom)
--	if err != nil {
--		return "", err
--	}
--	return fmt.Sprintf("%s", bDiff), nil
--}
--
--func main() {
--	startTime := time.Now() // To Benchmark
--	log.Print("Gitdo started")
--
--	err := LoadConfig()
--	if err != nil {
--		log.Print("couldn't load config: ", err)
--		os.Exit(1)
--	}
--
--	GetDiff := GetDiffFromFile
--	if config.DiffFrom == "cmd" {
--		GetDiff = GetDiffFromCmd
--	}
--
--	rawDiff, err := GetDiff()
--	if err != nil {
--		log.Print("error getting diff: ", err.Error())
--		os.Exit(1)
--	} else if rawDiff == "" {
--		log.Print("No git diff output - exiting")
--		os.Exit(1)
--	}
--
-+	// TODO: Load from config for XXX HACK FIXME and Custom annotation
--	TODOReg = regexp.MustCompile(`(?:[[:space:]]|)//(?:[[:space:]]|)TODO:[[:space:]](.*)`)
--
--	// Parse diff output
--	lines, err := diffparse.ParseGitDiff(rawDiff)
--	if err != nil {
--		log.Fatalf("Error processing diff: %v", err)
--		os.Exit(1)
--	}
--
--	// Loop over files and run go routines for each file changed
--	tasks := ProcessDiff(lines)
--	for _, task := range tasks {
--		log.Print(task)
--	}
--
--	file, err := os.OpenFile("staged_tasks.json", os.O_RDWR|os.O_CREATE, 0644)
--	if err != nil {
--		log.Print(err.Error())
--		os.Exit(1)
--	}
--	defer file.Close()
--
--	btask, err := json.Marshal(tasks)
--	if err != nil {
--		log.Print(err.Error())
--		os.Exit(1)
--	}
--	_, err = file.Write(btask)
--	if err != nil {
--		log.Print(err.Error())
--		os.Exit(1)
--	}
--	log.Print("Gitdo finished in ", time.Now().Sub(startTime))
--}
--
--// ProcessFileDiff Takes a diff section for a file and extracts TODO comments
--func ProcessDiff(lines []diffparse.SourceLine) []Task {
--	var stagedTasks []Task
--	for _, line := range lines {
--		task, found := CheckTask(line)
--		if found {
--			stagedTasks = append(stagedTasks, task)
--		}
--	}
--	return stagedTasks
--}
--
--func CheckTask(line diffparse.SourceLine) (Task, bool) {
--	match := TODOReg.FindStringSubmatch(line.Content)
--	if len(match) > 0 { // if match was found
--		t := Task{
--			line.FileTo,
--			match[1],
--			line.Position,
--			config.Author,
--		}
--		return t, true
--	}
--	return Task{}, false
--}
--
--type Task struct {
--	FileName string `json:"file_name"`
--	TaskName string `json:"task_name"`
--	FileLine int    `json:"file_line"`
--	Author   string `json:"author"`
--}
-diff --git a/app/cli_test.go b/app/cli_test.go
-deleted file mode 100644
-index eb92b07..0000000
---- a/app/cli_test.go
-+++ /dev/null
-@@ -1,23 +0,0 @@
--package main
--
--import "encoding/json"
--import "fmt"
--import "testing"
--
--func TestGetDiff(t *testing.T) {
--	fmt.Println("Running Test")
--	_, err := GetDiffFromCmd()
--	if err != nil {
--		t.Fail()
--	}
--}
--
--func TestVet(t *testing.T) {
--	example := []byte(`{"file_name": "cli.go", "task_name":"task todo", "file_line":2}`)
--	var task Task
--	err := json.Unmarshal(example, &task)
--	if err != nil {
--		t.Error(err)
--	}
--	fmt.Println(task)
--}
-diff --git a/app/config.go b/app/config.go
-deleted file mode 100644
-index 8c513d6..0000000
---- a/app/config.go
-+++ /dev/null
-@@ -1,28 +0,0 @@
--package main
--
--import (
--	"encoding/json"
--	"io/ioutil"
--	"log"
--)
--
--type Config struct {
--	Author     string `json:"author"`
--	PluginName string `json:"plugin_name"`
--	PluginCmd  string `json:"plugin_cmd"`
--	DiffFrom   string `json:"diff_from"`
--}
--
--//TODO: load config from file test
--func LoadConfig() error {
--	bConfig, err := ioutil.ReadFile("./config.json")
--	if err != nil {
--		return err
--	}
--	err = json.Unmarshal(bConfig, &config)
--	if err != nil {
--		return err
--	}
--	log.Print("Config loaded\n", config)
--	return nil
--}
-diff --git a/app/config.json b/app/config.json
-deleted file mode 100644
-index 90672b3..0000000
---- a/app/config.json
-+++ /dev/null
-@@ -1,6 +0,0 @@
--{
--	"author":"benjamin.coleman@me.com",
--	"plugin_cmd":"node",
--	"plugin_name":"./trello_js/trello.js",
--	"diff_from":"../diff_examples/example.txt"
--}
-diff --git a/app/staged_tasks.json b/app/staged_tasks.json
-deleted file mode 100644
-index 0af82c6..0000000
---- a/app/staged_tasks.json
-+++ /dev/null
-@@ -1 +0,0 @@
--[{"file_name":"cli.go","task_name":"Clean up this spaghetti code","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"config.go","task_name":"Create test suite","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"config.go","task_name":"Cleanup","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"diffparser/diffparser_test.go","task_name":"Fix init handler","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"diffparser/diffparser_test.go","task_name":"Testing","file_line":0,"author":"benjamin.coleman@me.com"}]
-\ No newline at end of file
-diff --git a/diff_examples/example.txt b/diff_examples/example.txt
-index 24f04f2..42fc427 100644
---- a/diff_examples/example.txt
-+++ b/diff_examples/example.txt
-@@ -37,7 +37,7 @@ index 30d4ebc..ca12716 100644
- -	output := fmt.Sprintf("%s\n", file.NewName)
- +	stagedTasks := make([]Task, 0)
- +
--+	// TODO: Clean up this spaghetti code
-++	// TODO(benjamin.coleman@me.com): Clean up this spaghetti code
-  	for _, hunk := range file.Hunks {
-  		for _, line := range hunk.NewRange.Lines {
- -			if line.Mode == 0 {
diff --git a/src/diffparse/parse.go b/src/diffparse/parse.go
deleted file mode 100644
index f256619..0000000
--- a/src/diffparse/parse.go
+++ /dev/null
@@ -1,107 +0,0 @@
-package diffparse
-
-import (
-	"fmt"
-	"os/exec"
-	"strings"
-)
-
-func GetGitDiff() (string, error) {
-	gitCmd := exec.Command("git", "diff", "--cached")
-	bDiff, err := gitCmd.Output()
-	if err != nil {
-		if err, ok := err.(*exec.ExitError); ok {
-			return "", fmt.Errorf("git diff failed to exit: %v", err.Stderr)
-		} else {
-			return "", fmt.Errorf("git diff couldn't be run: %v", err.Stderr)
-		}
-	}
-
-	return fmt.Sprintf("%s", bDiff), nil
-}
-
-const fromFilePrefix = "--- a/"
-const toFilePrefix = "+++ b/"
-const newFilePrefix = "--- /dev/null"
-const delFilePrefix = "+++ /dev/null"
-
-type FileMode int
-
-const (
-	MODIFIED FileMode = iota
-	NEW
-	DELETED
-)
-
-func ParseGitDiff(rawDiff string) ([]SourceLine, error) {
-	diffLines := strings.Split(rawDiff, "\n")
-
-	isFirstFile := true
-	inHeader := true
-
-	var sourceLines []SourceLine
-
-	var fromFileName string
-	var toFileName string
-
-	// Loop over diff
-	for _, line := range diffLines {
-		switch {
-		case strings.HasPrefix(line, "diff "):
-			inHeader = true
-			if !isFirstFile {
-				// Write File
-			} else {
-				isFirstFile = false
-			}
-		case strings.HasPrefix(line, fromFilePrefix):
-			fromFileName = strings.TrimPrefix(line, fromFilePrefix)
-
-		case strings.HasPrefix(line, toFilePrefix):
-			toFileName = strings.TrimPrefix(line, toFilePrefix)
-
-		case strings.HasPrefix(line, "@@ "):
-			inHeader = false
-
-		case !inHeader:
-			if line == `\ No newline at end of file` {
-				break
-			}
-			if strings.HasPrefix(line, "+") && !strings.HasPrefix(line, "++") {
-				l := SourceLine{
-					fromFileName,
-					toFileName,
-					strings.TrimPrefix(line, "+"),
-					0,
-					ADDED,
-				}
-				sourceLines = append(sourceLines, l)
-			} else if strings.HasPrefix(line, "-") && !strings.HasPrefix(line, "--") {
-				l := SourceLine{
-					fromFileName,
-					toFileName,
-					strings.TrimPrefix(line, "-"),
-					0,
-					REMOVED,
-				}
-				sourceLines = append(sourceLines, l)
-			}
-		}
-	}
-
-	return sourceLines, nil
-}
-
-type SourceLine struct {
-	FileFrom, FileTo string
-	Content          string
-	Position         int
-	Mode             LineMode
-}
-
-type LineMode int
-
-const (
-	ADDED = iota
-	REMOVED
-)
diff --git a/src/diffparse/parse_test.go b/src/diffparse/parse_test.go
deleted file mode 100644
index 3b929e9..0000000
--- a/src/diffparse/parse_test.go
+++ /dev/null
@@ -1,233 +0,0 @@
-package diffparse
-
-import (
-	"testing"
-)
-
-func TestGetGitDiff(t *testing.T) {
-	diff, err := GetGitDiff()
-	if err != nil {
-		t.Errorf("GetGitDiff returned error: %v", err)
-	}
-	t.Logf("GetGitDiff returned: %s", diff)
-}
-
-func TestParseGitDiff(t *testing.T) {
-	lines, err := ParseGitDiff(example_diff)
-	if err != nil {
-		t.Errorf("parse diff returned error: %v", err)
-	}
-	t.Logf("Output:\n%v", lines)
-}
-
-var example_diff string = `diff --git a/cli.go b/cli.go
-index 30d4ebc..ca12716 100644
---- a/cli.go
-+++ b/cli.go
-@@ -1,8 +1,9 @@
- package main
- 
- import (
-+	"encoding/json"
- 	"fmt"
--	"github.com/waigani/diffparser"
-+	"github.com/appscode/diffparser"
- 	"log"
- 	"os"
- 	"os/exec"
-@@ -24,12 +25,15 @@ func main() {
- 	}
- 
- 	// Save output as string
--	cmdOutput := fmt.Sprintf("\n%s", resp)
-+	cmdOutput := fmt.Sprintf("%s", resp)
-+
-+	fmt.Println(cmdOutput + "\n\n\n\n")
- 
- 	// Parse diff output
- 	diff, err := diffparser.Parse(cmdOutput)
- 	if err != nil {
- 		log.Fatalf("Error processing diff: %v", err)
-+		os.Exit(1)
- 	}
- 
- 	// Create waitgroup to sync handling of all files
-@@ -50,31 +54,29 @@ func ProcessFileDiff(file *diffparser.DiffFile, wg *sync.WaitGroup) {
- 
- 	re := regexp.MustCompile((?:[[:space:]]|)//(?:[[:space:]]|)TODO:[[:space:]](.*))
- 
--	output := fmt.Sprintf("%s\n", file.NewName)
-+	stagedTasks := make([]Task, 0)
-+
-+	// TODO: Clean up this spaghetti code
- 	for _, hunk := range file.Hunks {
- 		for _, line := range hunk.NewRange.Lines {
--			if line.Mode == 0 {
-+			if line.Mode == 0 { // if line was added
- 				match := re.FindStringSubmatch(line.Content)
--				if len(match) > 0 {
-+				if len(match) > 0 { // if match was found
- 					t := Task{
- 						file.NewName,
- 						match[1],
--						line.Position,
-+						line.Number,
- 					}
--					output += t.ToString() + "\n"
-+					stagedTasks = append(stagedTasks, t)
- 				}
- 			}
- 		}
- 	}
--	fmt.Println(output)
--}
- 
--type Task struct {
--	FileName string
--	TaskName string
--	Position int
--}
-+	b, err := json.Marshal(stagedTasks)
-+	if err != nil {
-+		log.Fatal(err)
-+	}
- 
--func (t *Task) ToString() string {
--	return fmt.Sprintf("File: %s, Task: %s, Pos: %d", t.FileName, t.TaskName, t.Position)
-+	fmt.Printf("%s\n", b)
- }
-diff --git a/config.go b/config.go
-index ea10e7d..eda3313 100644
---- a/config.go
-+++ b/config.go
-@@ -5,5 +5,8 @@ package main
- // TODO: with tab then space
- 
- func test() {
--	// TODO: Create test suite
-+}
-+
-+func hello() {
-+	// TODO: Cleanup
- }
-diff --git a/diffparser/diffparser.go b/diffparser/diffparser.go
-new file mode 100644
-index 0000000..afed857
---- /dev/null
-+++ b/diffparser/diffparser.go
-@@ -0,0 +1,43 @@
-+package diffparser
-+
-+import (
-+	"strings"
-+)
-+
-+// SplitToFiles takes the given diff and splits it in to an array of strings, each a different file section of the diff
-+func SplitToFiles(diff string) []string {
-+	diffLines := strings.Split(diff, "\n")
-+	var files []string
-+
-+	currentFile := ""
-+	for _, line := range diffLines {
-+		if strings.HasPrefix(line, "diff") && currentFile != "" {
-+			files = append(files, currentFile)
-+			currentFile = ""
-+		}
-+		currentFile += line + "\n"
-+	}
-+	files = append(files, currentFile)
-+
-+	return files
-+}
-+
-+// ParseDiff takes a given string diff and converts it in to useable structs
-+func ParseDiff(diff string) {
-+
-+}
-+
-+type File struct {
-+	OrigFile string
-+	NewFile  string
-+	Hunks    []hunk
-+}
-+type hunk struct {
-+	origStartInd int
-+	origRange    int
-+	newStartInd  int
-+	newRange     int
-+	content      string
-+}
-+
-+func SplitToChunk(file string) {}
-diff --git a/diffparser/diffparser_test.go b/diffparser/diffparser_test.go
-new file mode 100644
-index 0000000..2fde0d4
---- /dev/null
-+++ b/diffparser/diffparser_test.go
-@@ -0,0 +1,52 @@
-+package diffparser
-+
-+import "testing"
-+
-+var exampleDiff = diff --git a/Main.go b/Main.go
-+index 984e788..09fba66 100644
-+--- a/Main.go
-++++ b/Main.go
-+@@ -17,6 +17,7 @@ type PageInfo struct {
-+	 User *user.User
-+	 LoginOut string
-+ }
-+-//TODO: Fix init handler
-+ 
-+ func init() {
-+	 http.HandleFunc("/", HomeHandler)
-+@@ -43,6 +44,7 @@ func NewRequestHandler(w http.ResponseWriter, r *http.Request) {
-+	 }
-+ }
-+ 
-++//TODO: Talk to matt about handle here
-+ /**
-+ Handles the index page for header, footer and the likes
-+  */
-+diff --git a/Users.go b/Users.go
-+index 34e4c3b..7a81965 100644
-+--- a/Users.go
-++++ b/Users.go
-+@@ -4,7 +4,7 @@ import (
-+	 "golang.org/x/net/context"
-+	 "google.golang.org/appengine/user"
-+ )
-+-
-+-//TODO: Testing
-+ func userControl(ctx context.Context, currentPage string) (*user.User, string){
-+ 
-+	 user := user.Current(ctx)
-+@@ -33,6 +33,7 @@ func getLoginURL(ctx context.Context, currentPage string) (string, error) {
-+	 return loginURL, nil
-+ }
-+ 
-++   //TODO: Get out
-+ func getLogoutURL(ctx context.Context, currentPage string) (string, error) {
-+	 //LogoutURL
-+logoutURL, err := user.LogoutURL(ctx, currentPage)
-+
-+func TestSplitToFiles(t *testing.T) {
-+	result := SplitToFiles(exampleDiff)
-+	if len(result) != 2 {
-+		t.Errorf("Expected 2 file sections, got %d", len(result))
-+	}
-+}
-diff --git a/structs.go b/structs.go
-new file mode 100644
-index 0000000..9c1ba55
---- /dev/null
-+++ b/structs.go
-@@ -0,0 +1,7 @@
-+package main
-+
-+type Task struct {
-+	FileName string json: file_name
-+	TaskName string json: task_name
-+	FileLine int    json: FileLine
-+}
-`
diff --git a/src/plugins/gitdo_trello.py b/src/plugins/gitdo_trello.py
deleted file mode 100644
index 4824444..0000000
--- a/src/plugins/gitdo_trello.py
+++ /dev/null
@@ -1,5 +0,0 @@
-#!/usr/bin/python
-
-import sys
-
-print(str(sys.argv[1]))
diff --git a/src/plugins/trello_js/trello.js b/src/plugins/trello_js/trello.js
deleted file mode 100644
index 9bba9b5..0000000
--- a/src/plugins/trello_js/trello.js
+++ /dev/null
@@ -1,22 +0,0 @@
-// Get Trello Details
-var Trello = require("node-trello");
-
-var client = new Trello(key, token);
-
-var tasks = process.argv[2];
-var jsonTasks = JSON.parse(tasks);
-
-// Loop over passed task and add them to trello list
-jsonTasks.forEach(function(item){
-	var card = {
-		idList:"5aa0057dae6f639766e9bff4",
-		name: item.TaskName,
-		desc: "File: "+item.FileName + "\nLine: "+ item.FileLine+"\nCODE GOES HERE",
-	}
-	client.post("/1/cards?idList="+card.idList+"&name="+card.name+"&desc="+card.desc, function(err, data){
-		if (err) throw err;
-		console.log(data);
-	});
-});
-
-
diff --git a/src/pre-commit b/src/pre-commit
deleted file mode 100755
index 8011753..0000000
--- a/src/pre-commit
+++ /dev/null
@@ -1,17 +0,0 @@
-#!/bin/sh
-# Stash unstaged changes
-echo "stashing changes"
-git stash -q --keep-index
-
-# echo "running gitdo"
-# Edit your project files here
-# python ../Gitdo/inspect_git.py "$(git diff --cached)"
-.git/gitdo/Gitdo
-
-echo "staging updated files"
-# Stage updated files
-git add -u
-
-echo "applying original unstaged changes"
-# Re-apply original unstaged changes
-git stash pop -q
