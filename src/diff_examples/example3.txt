diff --git a/app/cli.go b/app/cli.go
deleted file mode 100644
index b927391..0000000
--- a/app/cli.go
+++ /dev/null
@@ -1,141 +0,0 @@
-package main
-
-import (
-	"encoding/json"
-	"fmt"
-	"github.com/nebbers1111/diffparse"
-	"io/ioutil"
-	"log"
-	"os"
-	"os/exec"
-	"regexp"
-	"time"
-)
-
-var (
-	TODOReg *regexp.Regexp
-	config  Config
-)
-
-// GetDiffFromCmd runs the git diff command on the OS and returns a string of the result or the error that the cmd produced.
-func GetDiffFromCmd() (string, error) {
-	// Run a git diff to look for changes --cached to be added for precommit hook
-	// cmd := exec.Command("git", "diff", "--cached")
-	cmd := exec.Command("git", "diff")
-
-	resp, err := cmd.Output()
-
-	// If error running git diff abort all
-	if err != nil {
-		if err, ok := err.(*exec.ExitError); ok {
-			log.Print("git diff failed to exit: ", string(err.Stderr))
-			return "", err
-		} else {
-			log.Print("git diff couldn't be ran: ", err.Error())
-			return "", err
-		}
-	}
-
-	return fmt.Sprintf("%s", resp), nil
-}
-
-func GetDiffFromFile() (string, error) {
-	bDiff, err := ioutil.ReadFile(config.DiffFrom)
-	if err != nil {
-		return "", err
-	}
-	return fmt.Sprintf("%s", bDiff), nil
-}
-
-func main() {
-	startTime := time.Now() // To Benchmark
-	log.Print("Gitdo started")
-
-	err := LoadConfig()
-	if err != nil {
-		log.Print("couldn't load config: ", err)
-		os.Exit(1)
-	}
-
-	GetDiff := GetDiffFromFile
-	if config.DiffFrom == "cmd" {
-		GetDiff = GetDiffFromCmd
-	}
-
-	rawDiff, err := GetDiff()
-	if err != nil {
-		log.Print("error getting diff: ", err.Error())
-		os.Exit(1)
-	} else if rawDiff == "" {
-		log.Print("No git diff output - exiting")
-		os.Exit(1)
-	}
-
+	// TODO: Load from config for XXX HACK FIXME and Custom annotation
-	TODOReg = regexp.MustCompile(`(?:[[:space:]]|)//(?:[[:space:]]|)TODO:[[:space:]](.*)`)
-
-	// Parse diff output
-	lines, err := diffparse.ParseGitDiff(rawDiff)
-	if err != nil {
-		log.Fatalf("Error processing diff: %v", err)
-		os.Exit(1)
-	}
-
-	// Loop over files and run go routines for each file changed
-	tasks := ProcessDiff(lines)
-	for _, task := range tasks {
-		log.Print(task)
-	}
-
-	file, err := os.OpenFile("staged_tasks.json", os.O_RDWR|os.O_CREATE, 0644)
-	if err != nil {
-		log.Print(err.Error())
-		os.Exit(1)
-	}
-	defer file.Close()
-
-	btask, err := json.Marshal(tasks)
-	if err != nil {
-		log.Print(err.Error())
-		os.Exit(1)
-	}
-	_, err = file.Write(btask)
-	if err != nil {
-		log.Print(err.Error())
-		os.Exit(1)
-	}
-	log.Print("Gitdo finished in ", time.Now().Sub(startTime))
-}
-
-// ProcessFileDiff Takes a diff section for a file and extracts TODO comments
-func ProcessDiff(lines []diffparse.SourceLine) []Task {
-	var stagedTasks []Task
-	for _, line := range lines {
-		task, found := CheckTask(line)
-		if found {
-			stagedTasks = append(stagedTasks, task)
-		}
-	}
-	return stagedTasks
-}
-
-func CheckTask(line diffparse.SourceLine) (Task, bool) {
-	match := TODOReg.FindStringSubmatch(line.Content)
-	if len(match) > 0 { // if match was found
-		t := Task{
-			line.FileTo,
-			match[1],
-			line.Position,
-			config.Author,
-		}
-		return t, true
-	}
-	return Task{}, false
-}
-
-type Task struct {
-	FileName string `json:"file_name"`
-	TaskName string `json:"task_name"`
-	FileLine int    `json:"file_line"`
-	Author   string `json:"author"`
-}
diff --git a/app/cli_test.go b/app/cli_test.go
deleted file mode 100644
index eb92b07..0000000
--- a/app/cli_test.go
+++ /dev/null
@@ -1,23 +0,0 @@
-package main
-
-import "encoding/json"
-import "fmt"
-import "testing"
-
-func TestGetDiff(t *testing.T) {
-	fmt.Println("Running Test")
-	_, err := GetDiffFromCmd()
-	if err != nil {
-		t.Fail()
-	}
-}
-
-func TestVet(t *testing.T) {
-	example := []byte(`{"file_name": "cli.go", "task_name":"task todo", "file_line":2}`)
-	var task Task
-	err := json.Unmarshal(example, &task)
-	if err != nil {
-		t.Error(err)
-	}
-	fmt.Println(task)
-}
diff --git a/app/config.go b/app/config.go
deleted file mode 100644
index 8c513d6..0000000
--- a/app/config.go
+++ /dev/null
@@ -1,28 +0,0 @@
-package main
-
-import (
-	"encoding/json"
-	"io/ioutil"
-	"log"
-)
-
-type Config struct {
-	Author     string `json:"author"`
-	PluginName string `json:"plugin_name"`
-	PluginCmd  string `json:"plugin_cmd"`
-	DiffFrom   string `json:"diff_from"`
-}
-
-//TODO: load config from file test
-func LoadConfig() error {
-	bConfig, err := ioutil.ReadFile("./config.json")
-	if err != nil {
-		return err
-	}
-	err = json.Unmarshal(bConfig, &config)
-	if err != nil {
-		return err
-	}
-	log.Print("Config loaded\n", config)
-	return nil
-}
diff --git a/app/config.json b/app/config.json
deleted file mode 100644
index 90672b3..0000000
--- a/app/config.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-	"author":"benjamin.coleman@me.com",
-	"plugin_cmd":"node",
-	"plugin_name":"./trello_js/trello.js",
-	"diff_from":"../diff_examples/example.txt"
-}
diff --git a/app/staged_tasks.json b/app/staged_tasks.json
deleted file mode 100644
index 0af82c6..0000000
--- a/app/staged_tasks.json
+++ /dev/null
@@ -1 +0,0 @@
-[{"file_name":"cli.go","task_name":"Clean up this spaghetti code","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"config.go","task_name":"Create test suite","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"config.go","task_name":"Cleanup","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"diffparser/diffparser_test.go","task_name":"Fix init handler","file_line":0,"author":"benjamin.coleman@me.com"},{"file_name":"diffparser/diffparser_test.go","task_name":"Testing","file_line":0,"author":"benjamin.coleman@me.com"}]
\ No newline at end of file
diff --git a/diff_examples/example.txt b/diff_examples/example.txt
index 24f04f2..42fc427 100644
--- a/diff_examples/example.txt
+++ b/diff_examples/example.txt
@@ -37,7 +37,7 @@ index 30d4ebc..ca12716 100644
 -	output := fmt.Sprintf("%s\n", file.NewName)
 +	stagedTasks := make([]Task, 0)
 +
-+	// TODO: Clean up this spaghetti code
++	// TODO(benjamin.coleman@me.com): Clean up this spaghetti code
  	for _, hunk := range file.Hunks {
  		for _, line := range hunk.NewRange.Lines {
 -			if line.Mode == 0 {
